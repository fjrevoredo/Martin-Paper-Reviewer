name: CI

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' && github.ref != 'refs/heads/develop' }}

jobs:
  test:
    name: Test (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    env:
      IS_PRIMARY_PLATFORM: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Create mock environment file
      run: |
        echo "OPENROUTER_API_KEY=mock_key_for_testing" > .env
        echo "DSPY_MODEL=openai/gpt-4o-mini" >> .env
        echo "DSPY_TEMPERATURE=0.1" >> .env
        echo "SEMANTIC_SCHOLAR_API_KEY=mock_semantic_scholar_key" >> .env

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black isort flake8
        pip install -e .

    - name: Verify installation
      run: |
        python -c "import martin; print('Martin package imported successfully')"
        python -c "from martin.models.paper_text import PaperText; print('PaperText imported successfully')"

    - name: Run tests with coverage
      run: |
        pytest --cov=martin --cov-report=xml --cov-report=term-missing

    - name: Run integration tests (if API key available)
      if: env.OPENROUTER_API_KEY != ''
      run: |
        pytest -m integration -v
      continue-on-error: true

    - name: Store coverage report
      if: env.IS_PRIMARY_PLATFORM == 'true' && always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml
        if-no-files-found: warn

  code-style:
    name: Code Style Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: test
    if: always() && needs.test.result != 'cancelled'

    steps:
    - name: Download coverage report
      uses: actions/download-artifact@v4
      with:
        name: coverage-report
      continue-on-error: true

    - name: Check if coverage report exists
      id: coverage-check
      run: |
        if [ -f "coverage.xml" ]; then
          echo "coverage-exists=true" >> $GITHUB_OUTPUT
        else
          echo "coverage-exists=false" >> $GITHUB_OUTPUT
          echo "WARNING: Coverage report not found - skipping upload"
        fi

    - name: Upload coverage to Codecov
      if: steps.coverage-check.outputs.coverage-exists == 'true'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false